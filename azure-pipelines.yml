trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# Define Variables
variables:
- name: ENVIRONMENT
  value: dev 

# Stage-1: Terraform Validate Stage
stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Terraform Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: PublishPipelineArtifact@1
        displayName: Publish Kube Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/kube-manifests'
          artifact: 'kube-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@1
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest' 

      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'akintola-terraform-aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'akintola-capstone-project'
          backendAzureRmStorageAccountName: 'akterraformstatexlrwdrzs'
          backendAzureRmContainerName: 'akintola-tfstatefiles'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false      

# Stage-2: Check Resource Existence
- stage: CheckResourceExistence
  dependsOn: TerraformValidate
  jobs:
    - job: CheckResourceExistenceJob
      steps:
      - script: |
          # Extracting the resource count from the state file
          RESOURCE_COUNT=$(terraform state list | wc -l)
          
          # Check if any resources exist
          if [ $RESOURCE_COUNT -gt 0 ]; then
            echo "Resources already exist. Setting variable to true."
            echo "##vso[task.setvariable variable=ResourceExists]true"
          else
            echo "No resources found. Setting variable to false."
            echo "##vso[task.setvariable variable=ResourceExists]false"
          fi
        displayName: 'Check Resource Existence'

# Stage-3: Deploy Stages for Dev & QA
- stage: DeployAKSClusters
  dependsOn: CheckResourceExistence
  condition: eq(dependencies.CheckResourceExistence.outputs['CheckResourceExistenceJob.ResourceExists'], 'false')
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:            
            - task: DownloadSecureFile@1
              displayName: Download SSH Key
              name: sshkey
              inputs:
                secureFile: 'akintola-aks-terraform-devops-ssh-key-ububtu.pub'
            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                backendType: 'azurerm'
                backendServiceArm: 'akintola-terraform-aks-azurerm-svc-con'
                backendAzureRmResourceGroupName: 'akintola-capstone-project'
                backendAzureRmStorageAccountName: 'akterraformstatexlrwdrzs'
                backendAzureRmContainerName: 'akintola-tfstatefiles'
                backendAzureRmKey: 'aks-$(ENVIRONMENT).tfstate'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceName: 'akintola-terraform-aks-azurerm-svc-con'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceName: 'akintola-terraform-aks-azurerm-svc-con'
                commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false 